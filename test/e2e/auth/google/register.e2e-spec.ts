import { Credential } from 'src/auth/credential.entity'
import { GoogleStrategy } from 'src/auth/strategies/google.strategy'
import { Role, User } from 'src/user/entities/user.entity'
import { after, before, ctx } from 'test/e2e/ctx'
import { patterns } from 'test/helpers/regex'

describe('Register', () => {
  let googleStrategy: GoogleStrategy

  beforeEach(async () => {
    await before()
    googleStrategy = ctx.moduleRef.get(GoogleStrategy)
    const mock = jest.spyOn(googleStrategy, 'authenticate').mockImplementation(() => {})
  })

  const body = {
    code: 'a token generated by google',
  }

  it('creates and logs in the user if google credentials are valid', async () => {
    const email = 'some@example.com'
    return ctx
      .request()
      .post('/google/register')
      .send(body)
      .expect(201)
      .expect((res) => {
        expect(res.body.data).toHaveProperty('token')
        expect(res.body.data.token).toMatch(patterns.jwt)
        expect(res.body.data).toHaveProperty('user.email', email)
        expect(res.body.data).toHaveProperty('user.role', Role.client)
        expect(res.body.data).not.toHaveProperty('user.password')
      })
      .then()
  })

  it('saves google credentials', async () => {
    return ctx
      .request()
      .post('/google/register')
      .send(body)
      .expect(201)
      .then(async () => {})
  })

  afterEach(after)
})
